import numpy as np
import matplotlib.pyplot as plt

#The charge magnitudes and signs
q1 = -1
q2 = 1

#The position of the charges
pos1 = np.array([1, 0])
pos2 = np.array([-1, 0])

#The range of the plot
x_min, x_max, y_min, y_max = -3, 3, -3, 3

# Define the number of points in each direction
num_points = 100

# Define a grid of points
x = np.linspace(x_min, x_max, num_points)
y = np.linspace(y_min, y_max, num_points)
X, Y = np.meshgrid(x, y)

# Calculate the potential at each point
V = np.zeros((num_points, num_points))
for i in range(num_points):
    for j in range(num_points):
        r1 = np.sqrt((X[i, j] - pos1[0])**2 + (Y[i, j] - pos1[1])**2)
        r2 = np.sqrt((X[i, j] - pos2[0])**2 + (Y[i, j] - pos2[1])**2)
        V[i, j] = q1 / r1 + q2 / r2

# Define the levels of the equipotential lines
levels = np.array([-2,-1,-.5,-.1,.1,.5,1,2])

# Alternatively, you can control the levels using this. This would give 20 levels of equal value away from each otgher ranging from -2 to 2. 
# min_value = -2
# max_value = 2
# num_levels = 20
# levels = np.linspace(-2, 2, 20)



# Plot the equipotential lines and the charges
fig, ax = plt.subplots()
ax.set_aspect('equal')
contour = ax.contour(X, Y, V, levels=levels, colors='k')
ax.clabel(contour, inline=True, fontsize=10)
ax.plot(pos1[0], pos1[1], 'ro', markersize=10*np.sqrt(abs(q1)))
ax.plot(pos2[0], pos2[1], 'bo', markersize=10*np.sqrt(abs(q2)))
ax.set_xlabel('x')
ax.set_ylabel('y')
ax.set_title('Equipotential Lines')
plt.show()
